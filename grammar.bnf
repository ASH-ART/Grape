<double_operator> ::= '+' | '*' | '-' | '**' | '/' | '//' | '%' | '~' | '=' | '==' | '!=' | '<' | '>' | '<=' | '>=' | '^' | '..' | ':' | '.' | 'or' | 'and' | 'xor' | 'in' | '->' | '<-';

<simple_operator> ::= '!' | '&' | '$' | 'not';

<expr> ::= '(' <expr> ')'
    | <expr> <double_operator> <expr>
    | <simple_operator> <expr>
    | <function_call>
    | <int>
    | <float>
    | <string>
    | <char>
    ;

<instructions> ::= <expr>
    | '(' { <instructions> } ')'
    | <structure_if>
    | <structure_else>
    | <structure_while>
    | <structure_loop>
    | <structure_for>
    | <structure_match>
    | <structure_lambda>
    | <structure_function>
    | <structure_let>
    ;

<operator_name> ::= 'operator' ( <double_operator> | <simple_operator> );

<comprehensive_list> ::= '[' <expr> '|' <var> 'in' <iterator> [ '|' <condition> [ '|' <expr> ] ] ] ] ']';

<structure_if> ::= 'if' <condition> <instructions>;

<structure_else> ::= <structure_if> 'else' <instructions>;

<structure_while> ::= 'while' <condition> <instructions>;

<structure_loop> ::= 'loop' <num> <instructions>;

<structure_for> ::= 'for' <var> in <iterator> <instructions>;

<structure_match> ::= '{' <expr> ( { '|' <expr> '=>' <instructions> } | <instructions> ) '}';

<function_name> ::= <type_check> | <operator_name> | <var_name>;

<structure_lambda> ::= '(' [ [ '...' ] { <type_check> } ] ')'  [ ':=' { [ '&' ] <var_name> } ] '=>' <instructions>;

<structure_function> ::= <function_name> '<-' <structure_lambda>;

<function_call> ::= <function_name>
    | <function_name> <expr>
    | <function_name> { <expr> } ';'
    ;